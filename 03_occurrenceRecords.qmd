---
title: "Occurrence Records"
format: html
---

  - `rgbif` to download records
  -  Simple filtering/removing duplicates
  -  Extract features at each point
  
## Using `rgbif` to get occurrence records

The package `rgbif` enables you to access GBIF's API and request records downloads. Download requests are associated with a DOI, making them reproducible and citeable.
  
### Set up GBIF credentials

To download from GBIF, you need to register and supply your registration credentials.

More on this [here](https://docs.ropensci.org/rgbif/articles/gbif_credentials.html)

```{r}
#| eval: false
# install.packages("usethis")

usethis::edit_r_environ()

```

This will bring up a file called **.Renviron**. Add your credential information here (replace with your info).

```{r}
#| eval: false

GBIF_USER="fakeuser"
GBIF_PWD="safe_fake_password_123"
GBIF_EMAIL="fakeuser@gbif.org"

```


### Getting the GBIF taxon key

Although we can search GBIF using the scientific name, this can sometimes return poorly matched results if things like authorship information is missing. We can use the function `rgbif::name_backbone()` to identify the GBIF taxon key that will return precise taxon matches.

```{r taxonkey}

rgbif::name_backbone("Bombus sitkensis")

```

The taxon key for _Bombus sitkensis_ is 1340328.

### Set up an `rgbif` query

There are many query parameters available to narrow down a request for observation records. We are including a few parameters that indicate acceptable-quality data for creating robust distribution maps. These include:

- Has geographic coordinates
- Has no geospatial issues
- Has acceptable geospatial coordinate accuracy
- Represents the presence of the target organism
- Within a desired time range
- Represents a human observation
- Is within our focal geographic extent

The GBIF API has specific search terms (called 'predicates' in their domain-specific language) that can specify these parameters. Below we are creating variables to store these values

```{r predvars}

hasCoordinate <- TRUE
hasGeospatialIssue <- FALSE
coordinateUncertaintyInMeters <- "0,120"
occurrenceStatus <- "PRESENT"
year <- "2015,2025"
basisOfRecord <- "OBSERVATION;HUMAN_OBSERVATION;OCCURRENCE"
stateProvince <- "Oregon"
country <- "US"

```

Now we can use the function `rgbif::occ_count()` to preview how many GBIF records we will return if we use these search terms.

```{r counts}

rgbif::occ_count(
  taxonKey = 1340328.,
  hasCoordinate = hasCoordinate,
  hasGeospatialIssue = hasGeospatialIssue,
  coordinateUncertaintyInMeters = coordinateUncertaintyInMeters,
  occurrenceStatus = occurrenceStatus,
  year = year,
  basisOfRecord = basisOfRecord,
  stateProvince = stateProvince,
  country = country
)

```