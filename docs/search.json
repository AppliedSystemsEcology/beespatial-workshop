[
  {
    "objectID": "04_modelFit.html",
    "href": "04_modelFit.html",
    "title": "Species Distribution Model with Random Forest",
    "section": "",
    "text": "RF model with ranger\nModel evaluation (Probably use Continuous Boyce)\nPrediction",
    "crumbs": [
      "4 Fitting a model"
    ]
  },
  {
    "objectID": "05_dataVis.html",
    "href": "05_dataVis.html",
    "title": "Mapping",
    "section": "",
    "text": "generate a map with ggplot/tidyterra",
    "crumbs": [
      "5 Data visualization"
    ]
  },
  {
    "objectID": "01_setup.html",
    "href": "01_setup.html",
    "title": "Setup your R environment",
    "section": "",
    "text": "Install packages/setup environment\nWhere to find data if there are issues w/ BeeSpatial, GBIF, LANDFIRE\nDownloading/cloning the github repo\n\n\n\nFor this workshop we will use the renv package to create a reproducible R environment. To initialize the environment first install the renv package.\n\ninstall.packages(\"renv\")\n\nThen run renv::restore() to install all of the packages we will use in this workshop.\n\nrenv::restore()\n\n- The library is already synchronized with the lockfile.",
    "crumbs": [
      "1 Setup"
    ]
  },
  {
    "objectID": "01_setup.html#renv",
    "href": "01_setup.html#renv",
    "title": "Setup your R environment",
    "section": "",
    "text": "For this workshop we will use the renv package to create a reproducible R environment. To initialize the environment first install the renv package.\n\ninstall.packages(\"renv\")\n\nThen run renv::restore() to install all of the packages we will use in this workshop.\n\nrenv::restore()\n\n- The library is already synchronized with the lockfile.",
    "crumbs": [
      "1 Setup"
    ]
  },
  {
    "objectID": "02_envFeatures.html",
    "href": "02_envFeatures.html",
    "title": "Study Area and Environmental Features",
    "section": "",
    "text": "Identify some landscape online data resources that can be used for insect distribution mapping\nLoad GIS data layers into R and clean and visualize them in preparation for modeling",
    "crumbs": [
      "2 Environmental features"
    ]
  },
  {
    "objectID": "beespatial.html",
    "href": "beespatial.html",
    "title": "BeeSpatial",
    "section": "",
    "text": "BeeSpatial is a companion web application to Beescape. It provides researchers access to pollinator habitat quality indices that assess nesting suitability, floral resources, toxicity of potentially applied insecticides, and economic value of pollination. It also hosts base data layers on land cover and climate. Data are available from 2008 to the most recent available year.\nBeeSpatial can be used to query data commonly used when modeling the environemental drivers of species’ or commmunity responses.\nBeeSpatial allows users to extract:\n\nClimate data: monthly precipitation, min, and max temperature from PRISM\nCrop land covers: from the NASS CropLand Data Layer\nBeescape indices: spring forage, summer forage, fall forage, nesting, and pesticides"
  },
  {
    "objectID": "03_occurrenceRecords.html",
    "href": "03_occurrenceRecords.html",
    "title": "Occurrence Records",
    "section": "",
    "text": "rgbif to download records\nSimple filtering/removing duplicates\nExtract features at each point",
    "crumbs": [
      "3 Occurrence records"
    ]
  },
  {
    "objectID": "03_occurrenceRecords.html#using-rgbif-to-get-occurrence-records",
    "href": "03_occurrenceRecords.html#using-rgbif-to-get-occurrence-records",
    "title": "Occurrence Records",
    "section": "Using rgbif to get occurrence records",
    "text": "Using rgbif to get occurrence records\nThe package rgbif enables you to access GBIF’s API and request records downloads. Download requests are associated with a DOI, making them reproducible and citeable.\n\nSet up GBIF credentials\nTo download from GBIF, you need to register and supply your registration credentials.\nMore on this here\n\n# install.packages(\"usethis\")\n\nusethis::edit_r_environ()\n\nThis will bring up a file called .Renviron. Add your credential information here (replace with your info).\n\nGBIF_USER=\"fakeuser\"\nGBIF_PWD=\"safe_fake_password_123\"\nGBIF_EMAIL=\"fakeuser@gbif.org\"\n\n\n\nGet the GBIF taxon key\nAlthough we can search GBIF using the scientific name, this can sometimes return poorly matched results if things like authorship information is missing. We can use the function rgbif::name_backbone() to identify the GBIF taxon key that will return precise taxon matches.\n\nrgbif::name_backbone(\"Bombus sitkensis\")\n\n# A tibble: 1 × 22\n  usageKey scientificName        canonicalName rank  status confidence matchType\n*    &lt;int&gt; &lt;chr&gt;                 &lt;chr&gt;         &lt;chr&gt; &lt;chr&gt;       &lt;int&gt; &lt;chr&gt;    \n1  1340328 Bombus sitkensis Nyl… Bombus sitke… SPEC… ACCEP…         97 EXACT    \n# ℹ 15 more variables: kingdom &lt;chr&gt;, phylum &lt;chr&gt;, order &lt;chr&gt;, family &lt;chr&gt;,\n#   genus &lt;chr&gt;, species &lt;chr&gt;, kingdomKey &lt;int&gt;, phylumKey &lt;int&gt;,\n#   classKey &lt;int&gt;, orderKey &lt;int&gt;, familyKey &lt;int&gt;, genusKey &lt;int&gt;,\n#   speciesKey &lt;int&gt;, class &lt;chr&gt;, verbatim_name &lt;chr&gt;\n\n\nThe taxon key for Bombus sitkensis is 1340328.\n\n\nSet up an rgbif query\nThere are many query parameters available to narrow down a request for observation records. We are including a few parameters that indicate acceptable-quality data for creating robust distribution maps. These include:\n\nHas geographic coordinates\nHas no geospatial issues\nHas acceptable geospatial coordinate accuracy\nRepresents the presence of the target organism\nWithin a desired time range\nRepresents a human observation\nIs within our focal geographic extent\n\nThe GBIF API has specific search terms (called ‘predicates’ in their domain-specific language) that can specify these parameters. Below we are creating variables to store these values\n\nhasCoordinate &lt;- TRUE\nhasGeospatialIssue &lt;- FALSE\ncoordinateUncertaintyInMeters &lt;- \"0,120\"\noccurrenceStatus &lt;- \"PRESENT\"\nyear &lt;- \"2015,2025\"\nbasisOfRecord &lt;- \"OBSERVATION;HUMAN_OBSERVATION;OCCURRENCE\"\nstateProvince &lt;- \"Oregon\"\ncountry &lt;- \"US\"\n\nNow we can use the function rgbif::occ_count() to preview how many GBIF records we will return if we use these search terms.\n\nrgbif::occ_count(\n  taxonKey = 1340328.,\n  hasCoordinate = hasCoordinate,\n  hasGeospatialIssue = hasGeospatialIssue,\n  coordinateUncertaintyInMeters = coordinateUncertaintyInMeters,\n  occurrenceStatus = occurrenceStatus,\n  year = year,\n  basisOfRecord = basisOfRecord,\n  stateProvince = stateProvince,\n  country = country\n)\n\n[1] 204",
    "crumbs": [
      "3 Occurrence records"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome to the Eco-Spatial Workshop!",
    "section": "",
    "text": "This website is the online material for the workshop An Introduction to Eco-spatial Data in R: Accessing, Visualizing, and Applying Machine Learning at Entomology 2025.",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "index.html#objectives",
    "href": "index.html#objectives",
    "title": "Welcome to the Eco-Spatial Workshop!",
    "section": "Objectives",
    "text": "Objectives\nBy the end of this course, attendees will be able to:\n\nIdentify some landscape online data resources that can be used for insect distribution mapping\nLoad GIS data layers into R and clean and visualize them in preparation for modeling\nUse an R package to search for and download georeferenced citizen science observation records from the Global Biodiversity Information Facility (GBIF)\nFit a simple species distribution model using the random forest machine learning algorithm\nVisualize the species distribution model results using R",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "index.html#workshop-objectives",
    "href": "index.html#workshop-objectives",
    "title": "Welcome to the Eco-Spatial Workshop!",
    "section": "Workshop Objectives",
    "text": "Workshop Objectives\nBy the end of this course, attendees will be able to:\n\nIdentify some landscape online data resources that can be used for insect distribution mapping\nLoad GIS data layers into R and clean and visualize them in preparation for modeling\nUse an R package to search for and download georeferenced citizen science observation records from the Global Biodiversity Information Facility (GBIF)\nFit a simple species distribution model using the random forest machine learning algorithm\nVisualize the species distribution model results using R",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "02_envFeatures.html#objectives",
    "href": "02_envFeatures.html#objectives",
    "title": "Study Area and Environmental Features",
    "section": "",
    "text": "Identify some landscape online data resources that can be used for insect distribution mapping\nLoad GIS data layers into R and clean and visualize them in preparation for modeling",
    "crumbs": [
      "2 Environmental features"
    ]
  },
  {
    "objectID": "02_envFeatures.html#landscape-data-resources",
    "href": "02_envFeatures.html#landscape-data-resources",
    "title": "Study Area and Environmental Features",
    "section": "",
    "text": "We’ll be download data using two different resources that serve landscape data to researchers:\n\nBeeSpatial - A portal to access research data layers and summaries that extends the information presented on the Beescape app\nrlandfire - an R package that provides access to a diverse suite of spatial data layers from LANDFIRE, that provides data layers for wildfire management, fuel modeling, ecology, natural resource management, climate, conservation, etc.\n\nThese resources take two different approaches to serving data, as you’ll see.",
    "crumbs": [
      "2 Environmental features"
    ]
  },
  {
    "objectID": "02_envFeatures.html#beespatial",
    "href": "02_envFeatures.html#beespatial",
    "title": "Study Area and Environmental Features",
    "section": "BeeSpatial",
    "text": "BeeSpatial\n\nDownload BeeSpatial data\nBeeSpatial has a point-and-click graphical user interface. We will use it to download raster layers for climate, nesting habitat, and seasonal floral resources. Statewide rasters for these layers can be selected using the Select geographic boundaries option in the Select locations step. More information on using BeeSpatial can be found here.\n For this workshop, we will need the following statewide layers, for Oregon, from BeeSpatial:\n\nMonthly maximum and minimum temperatures for 2020\nMonthly total precipitation for 2020\nPollinator foraging resource in spring, summer, and fall at 5km range for 2015-2023\nPollinator nesting resources at 5km range for 2015-2023\n\n\n\nLoad the downloaded data\n\nlibrary(terra)\n\nterra 1.8.60\n\ndownloadpath &lt;- \"download/Oregon_raster_data/\"   # change to your download location\n\ntmin &lt;- rast(paste0(downloadpath,\"tmin_2020_STATE_FIPS_41.tif\"))\ntmax &lt;- rast(paste0(downloadpath,\"tmax_2020_STATE_FIPS_41.tif\"))\npr &lt;- rast(paste0(downloadpath, \"pr_2020_STATE_FIPS_41.tif\"))\n\nIf we take a look at one of the downloaded climate datasets:\n\npr\n\nclass       : SpatRaster \nsize        : 103, 194, 12  (nrow, ncol, nlyr)\nresolution  : 0.04166667, 0.04166667  (x, y)\nextent      : -124.5625, -116.4792, 41.97917, 46.27083  (xmin, xmax, ymin, ymax)\ncoord. ref. : lon/lat NAD83 (EPSG:4269) \nsource      : pr_2020_STATE_FIPS_41.tif \nnames       : pr202001, pr202002, pr202003, pr202004, pr202005, pr202006, ... \nmin values  :    9.680,    0.000,    8.370,    1.783,    7.118,    0.000, ... \nmax values  : 1598.803,  816.065,  365.797,  335.101,  460.783,  312.381, ... \n\n\nNotice that the downloaded climate data is in geographic coordinates, which is designed for a sphere and uses angles to indicate location and distance. Note that the resolution of each pixel is 0.04166667, 0.04166667  (x, y). These values are in units of degrees. We want to change this to a projected coordinate system, which represents consistent units on the ground and matches with the LANDFIRE data.\n\n\nChange the projection\nWe’re going to use the Universal Transverse Mercator (UTM) zone 10N projection, which works well for the state of Oregon.\n\ntmin &lt;- terra::project(tmin, \"epsg:32610\")   # 32610 indicates the EPSG code for UTM 10N\ntmax &lt;- terra::project(tmax, \"epsg:32610\") \npr &lt;- terra::project(pr, \"epsg:32610\")\n\npr\n\nclass       : SpatRaster \nsize        : 136, 183, 12  (nrow, ncol, nlyr)\nresolution  : 3658.236, 3658.236  (x, y)\nextent      : 370553.5, 1040011, 4647323, 5144843  (xmin, xmax, ymin, ymax)\ncoord. ref. : WGS 84 / UTM zone 10N (EPSG:32610) \nsource(s)   : memory\nnames       :   pr202001, pr202002,   pr202003,   pr202004,  pr202005,     pr202006, ... \nmin values  :   10.12199,   0.0000,   8.673513,   2.089378,   7.87682, 1.932672e-03, ... \nmax values  : 1453.62988, 779.6107, 321.533447, 327.014679, 455.98788, 2.770888e+02, ... \n\n\nNow looking at the attributes of the climate data, we see that the resolution value is much larger (3658.236, 3658.236  (x, y)). This is because they are now in units of meters. Each pixel of this raster has resolution of roughly 4km. We will use this as a template for the LANDFIRE data layers, since this is our coarsest resolution layer.",
    "crumbs": [
      "2 Environmental features"
    ]
  },
  {
    "objectID": "02_envFeatures.html#rlandfire",
    "href": "02_envFeatures.html#rlandfire",
    "title": "Study Area and Environmental Features",
    "section": "rlandfire",
    "text": "rlandfire\n\nDownload rlandfire data\nWe will use rlandfire to get additional landscape data:\n\nElevation\nVegetation cover\n\nSee the rlandfire tutorial for more background about these steps.\nAs a first step, load the package and use one of the climate layers (loaded in the previous step) to determine the area of interest (AOI) that we will use to get the LANDFIRE data. We can use the rlandfire function getAOI to do this.\n\nlibrary(rlandfire)\n\naoi &lt;- getAOI(tmin)\naoi\n\n[1] -124.68530   41.79367 -115.99465   46.44474\n\n\nThe AOI is specified in geographic coordinates, with is what is required by the LANDFIRE API that rlandfire is talking to.\nTo request layers using rlandfire we have to specify the LANDFIRE products using their abbreviated names. The layers can be viewed here, which is also accessible using the package function rlandfire::viewProducts(). We will be selecting the elevation layer:\n\nELEV2020 = 2020 elevation\n200EVH = existing vegetation height (not used)\n\n\nproducts &lt;- c(\"ELEV2020\")\n\n# additional parameters\nemail &lt;- \"rlandfire@example.com\"\nlfpath &lt;- paste0(getwd(),\"/download/lf.zip\")   # change to your FULL download path\nprojection &lt;- 32610                            # UTM 10N\nresolution &lt;- res(tmin)[1]                     # match climate data resolution\n\nresp &lt;- landfireAPIv2(products = products,\n                    aoi = aoi, \n                    projection = projection,\n                    resolution = resolution,\n                    email = email,\n                    path = lfpath,\n                    verbose = FALSE)\n\n\n\nLoad the downloaded data\nIn order to load the layer into R, unzip the file at the location you indicated in lfpath. We want the file with the extension ‘.tif’. The filename produced is long, so we’ve renamed it to ‘elevation.tif’ in these directions.\n\nelev &lt;- rast(paste0(downloadpath, \"elevation.tif\"))\n\nplot(elev)\n\n\n\n\nElevation data from LANDFIRE.",
    "crumbs": [
      "2 Environmental features"
    ]
  },
  {
    "objectID": "02_envFeatures.html#prepare-model-inputs",
    "href": "02_envFeatures.html#prepare-model-inputs",
    "title": "Study Area and Environmental Features",
    "section": "Prepare model inputs",
    "text": "Prepare model inputs\nFor our species distribution model, we are planning to use mean precipitation, mean temperature, and elevation as inputs. We already have elevation.\nLet’s look at the climate data from BeeSpatial. This data originates from the PRISM group, which produces weather raster layers from climate station data.\n\nplot(tmin)\n\n\n\n\nContents of the minimum temperature raster.\n\n\n\n\nAs you can see, this data is comprised of 12 layers. Each layer represents the minimum temperature for the month indicated by the last two digits of the layer name, e.g., May of 2020: “tmin202005”. What we want, however, is the mean temperature over the whole year. To get this, we will perform some aggregation.\n\nData aggregation: Calculate annual mean temperature\nTo get a mean annual temperature raster, we will combine the monthly min (tmin) and max (tmax) temperature layers in this way:\n\nAverage tmin and tmax pixels for each month to get a monthly mean –&gt; tmean_mon\nAverage monthly means across the year to get the average temperature for the year –&gt; *tmean_yr**\n\n\n1. Calculate monthly mean temperature tmean_mon\nWe can calculate the monthly average for each month by simply adding the tmin and tmax rasters and dividing by two. This is possible because these rasters’ layers match so that the first layer (January) of tmin is added to the first layer of tmax and divided by two, etc.\n\ntmean_mon &lt;- (tmin + tmax)/2\n\nplot(tmean_mon)\n\n\n\n\nCalculated mean monthly temperature. The layer names are inherited from tmin.\n\n\n\n\n\n\n2. Calculate annual mean temperature tmean_yr\nWe simply use mean() to calculate the mean across month layers in the tmean_mon raster.\n\ntmean_yr &lt;- mean(tmean_mon)\n\nplot(tmean_yr)\n\n\n\n\nCalculated mean annual temperature.\n\n\n\n\n\n\n\nData aggregation: Calculate mean annual precipitation prmean\nCalculating the mean annual precipitation (prmean) uses the same approach as calculating the mean annual temperature from monthly means.\n\nprmean &lt;- mean(pr)",
    "crumbs": [
      "2 Environmental features"
    ]
  },
  {
    "objectID": "02_envFeatures.html#make-model-input-layers-align",
    "href": "02_envFeatures.html#make-model-input-layers-align",
    "title": "Study Area and Environmental Features",
    "section": "Make model input layers align",
    "text": "Make model input layers align\nTo overlay these raster day from different sources, we need to check if they have the same projection, resolution, and alignment.\nCheck if the climate data and LANDFIRE data have the same projection. We’re only using prmean for the climate data, since we know they’re all from the same source.\n\nsame.crs(crs(prmean), crs(elev))\n\n[1] TRUE\n\n\nWe expected the projection to be the same because we requested a specific projection in rlandfire.\nCheck if the resolution is the same.\n\nall.equal(res(prmean), res(elev))\n\n[1] \"Mean relative difference: 6.449424e-05\"\n\n\nIt looks like there’s a small difference resolution. If you compare the actual values of the climate data (res(prmean)) and elevation (res(elev)), it looks like the LANDFIRE layer only matches the climate layer resolution to the nearest whole number. This means that these layers also don’t align over their extents.\n\nResample\nTo make these layers’ resolution match and their pixels align, we will use resampling. This means transferring the raster data to a new pixel grid. We will do this by matching the elev raster grid to that of the climate datasets. To translate the data to the new grid, we will use the nearest neighbor function, which simply assigns pixel values to the new grid based on the value of the nearest pixel value from the old grid. There are other options that use continuous interpolation but we’re keeping it simple for this workshop.\n\nelev2 &lt;- resample(elev,            # layer to be resampled\n                  prmean,          # target grid to base resampling on\n                  method = \"near\"  # method is nearest neighbor\n                  )\n\nNow we can check if these layers share the same resolution:\n\nall.equal(res(prmean), res(elev2))\n\n[1] TRUE\n\n\nAnd if their extents are the same:\n\nall.equal(ext(prmean), ext(elev2))\n\n[1] TRUE",
    "crumbs": [
      "2 Environmental features"
    ]
  }
]