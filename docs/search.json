[
  {
    "objectID": "04_modelFit.html",
    "href": "04_modelFit.html",
    "title": "Species Distribution Model with Random Forest",
    "section": "",
    "text": "RF model with ranger\nModel evaluation (Probably use Continuous Boyce)\nPrediction",
    "crumbs": [
      "4 Fitting a model"
    ]
  },
  {
    "objectID": "05_dataVis.html",
    "href": "05_dataVis.html",
    "title": "Mapping",
    "section": "",
    "text": "generate a map with ggplot/tidyterra",
    "crumbs": [
      "5 Data visualization"
    ]
  },
  {
    "objectID": "01_setup.html",
    "href": "01_setup.html",
    "title": "Setup your R environment",
    "section": "",
    "text": "Install packages/setup environment\nWhere to find data if there are issues w/ BeeSpatial, GBIF, LANDFIRE\nDownloading/cloning the github repo\n\n\n\nFor this workshop we will use the renv package to create a reproducible R environment. To initialize the environment first install the renv package and then run renv::restore() to install all of the packages we will use in this workshop.\n\ninstall.packages(\"renv\")\n\nThe following package(s) will be installed:\n- renv [1.1.5]\nThese packages will be installed into \"~/Documents/GitHub/beespatial-workshop/renv/library/macos/R-4.5/aarch64-apple-darwin20\".\n\n# Installing packages --------------------------------------------------------\n- Installing renv ...                           OK [linked from cache]\nSuccessfully installed 1 package in 4.3 milliseconds.\n\nrenv::restore()\n\n- The library is already synchronized with the lockfile.",
    "crumbs": [
      "1 Setup"
    ]
  },
  {
    "objectID": "01_setup.html#renv",
    "href": "01_setup.html#renv",
    "title": "Setup your R environment",
    "section": "",
    "text": "For this workshop we will use the renv package to create a reproducible R environment. To initialize the environment first install the renv package and then run renv::restore() to install all of the packages we will use in this workshop.\n\ninstall.packages(\"renv\")\n\nThe following package(s) will be installed:\n- renv [1.1.5]\nThese packages will be installed into \"~/Documents/GitHub/beespatial-workshop/renv/library/macos/R-4.5/aarch64-apple-darwin20\".\n\n# Installing packages --------------------------------------------------------\n- Installing renv ...                           OK [linked from cache]\nSuccessfully installed 1 package in 4.3 milliseconds.\n\nrenv::restore()\n\n- The library is already synchronized with the lockfile.",
    "crumbs": [
      "1 Setup"
    ]
  },
  {
    "objectID": "02_envFeatures.html",
    "href": "02_envFeatures.html",
    "title": "Study Area and Environmental Features",
    "section": "",
    "text": "NaturalEarthHires (or just read in shp) for Oregon\nBeeSpatial walkthrough\nrlandfire for additional layers\nAggregation and transformation",
    "crumbs": [
      "2 Environmental features"
    ]
  },
  {
    "objectID": "beespatial.html",
    "href": "beespatial.html",
    "title": "BeeSpatial",
    "section": "",
    "text": "BeeSpatial is a companion web application to Beescape. It provides researchers access to pollinator habitat quality indices that assess nesting suitability, floral resources, toxicity of potentially applied insecticides, and economic value of pollination. It also hosts base data layers on land cover and climate. Data are available from 2008 to the most recent available year.\nBeeSpatial can be used to query data commonly used when modeling the environemental drivers of species’ or commmunity responses.\nBeeSpatial allows users to extract:\n\nClimate data: monthly precipitation, min, and max temperature from PRISM\nCrop land covers: from the NASS CropLand Data Layer\nBeescape indices: spring forage, summer forage, fall forage, nesting, and pesticides"
  },
  {
    "objectID": "03_occurrenceRecords.html",
    "href": "03_occurrenceRecords.html",
    "title": "Occurrence Records",
    "section": "",
    "text": "rgbif to download records\nSimple filtering/removing duplicates\nExtract features at each point",
    "crumbs": [
      "3 Occurrence records"
    ]
  },
  {
    "objectID": "03_occurrenceRecords.html#using-rgbif-to-get-occurrence-records",
    "href": "03_occurrenceRecords.html#using-rgbif-to-get-occurrence-records",
    "title": "Occurrence Records",
    "section": "Using rgbif to get occurrence records",
    "text": "Using rgbif to get occurrence records\nThe package rgbif enables you to access GBIF’s API and request records downloads. Download requests are associated with a DOI, making them reproducible and citeable.\n\nSet up GBIF credentials\nTo download from GBIF, you need to register and supply your registration credentials.\nMore on this here\n\n# install.packages(\"usethis\")\n\nusethis::edit_r_environ()\n\nThis will bring up a file called .Renviron. Add your credential information here (replace with your info).\n\nGBIF_USER=\"fakeuser\"\nGBIF_PWD=\"safe_fake_password_123\"\nGBIF_EMAIL=\"fakeuser@gbif.org\"\n\n\n\nGetting the GBIF taxon key\nAlthough we can search GBIF using the scientific name, this can sometimes return poorly matched results if things like authorship information is missing. We can use the function rgbif::name_backbone() to identify the GBIF taxon key that will return precise taxon matches.\n\nrgbif::name_backbone(\"Bombus sitkensis\")\n\n# A tibble: 1 × 22\n  usageKey scientificName        canonicalName rank  status confidence matchType\n*    &lt;int&gt; &lt;chr&gt;                 &lt;chr&gt;         &lt;chr&gt; &lt;chr&gt;       &lt;int&gt; &lt;chr&gt;    \n1  1340328 Bombus sitkensis Nyl… Bombus sitke… SPEC… ACCEP…         97 EXACT    \n# ℹ 15 more variables: kingdom &lt;chr&gt;, phylum &lt;chr&gt;, order &lt;chr&gt;, family &lt;chr&gt;,\n#   genus &lt;chr&gt;, species &lt;chr&gt;, kingdomKey &lt;int&gt;, phylumKey &lt;int&gt;,\n#   classKey &lt;int&gt;, orderKey &lt;int&gt;, familyKey &lt;int&gt;, genusKey &lt;int&gt;,\n#   speciesKey &lt;int&gt;, class &lt;chr&gt;, verbatim_name &lt;chr&gt;\n\n\nThe taxon key for Bombus sitkensis is 1340328.\n\n\nSet up an rgbif query\nThere are many query parameters available to narrow down a request for observation records. We are including a few parameters that indicate acceptable-quality data for creating robust distribution maps. These include:\n\nHas geographic coordinates\nHas no geospatial issues\nHas acceptable geospatial coordinate accuracy\nRepresents the presence of the target organism\nWithin a desired time range\nRepresents a human observation\nIs within our focal geographic extent\n\nThe GBIF API has specific search terms (called ‘predicates’ in their domain-specific language) that can specify these parameters. Below we are creating variables to store these values\n\nhasCoordinate &lt;- TRUE\nhasGeospatialIssue &lt;- FALSE\ncoordinateUncertaintyInMeters &lt;- \"0,120\"\noccurrenceStatus &lt;- \"PRESENT\"\nyear &lt;- \"2015,2025\"\nbasisOfRecord &lt;- \"OBSERVATION;HUMAN_OBSERVATION;OCCURRENCE\"\nstateProvince &lt;- \"Oregon\"\ncountry &lt;- \"US\"\n\nNow we can use the function rgbif::occ_count() to preview how many GBIF records we will return if we use these search terms.\n\nrgbif::occ_count(\n  taxonKey = 1340328.,\n  hasCoordinate = hasCoordinate,\n  hasGeospatialIssue = hasGeospatialIssue,\n  coordinateUncertaintyInMeters = coordinateUncertaintyInMeters,\n  occurrenceStatus = occurrenceStatus,\n  year = year,\n  basisOfRecord = basisOfRecord,\n  stateProvince = stateProvince,\n  country = country\n)\n\n[1] 204",
    "crumbs": [
      "3 Occurrence records"
    ]
  }
]